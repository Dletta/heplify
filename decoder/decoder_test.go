package decoder

import (
	"testing"
	"time"

	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/sipcapture/heplify/config"
)

var rawSIPPacket = []byte{0x0, 0x3, 0xba, 0x94, 0x63, 0x3e, 0x0, 0x0, 0x0, 0x60, 0xdd, 0x19, 0x8, 0x0, 0x45, 0x0, 0x3, 0x30, 0x11, 0xb5, 0x0, 0x0, 0x80, 0x11, 0x86, 0x6, 0xc8, 0x39, 0x7, 0xcc, 0xc8, 0x39, 0x7, 0xc3, 0x13, 0xc5, 0x13, 0xc4, 0x3, 0x1c, 0x1f, 0xa3, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x6b, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35, 0x63, 0x30, 0x35, 0x32, 0x31, 0x63, 0x63, 0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0xd, 0xa, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x32, 0x39, 0x31, 0x64, 0x39, 0x30, 0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66, 0x34, 0x33, 0x35, 0x33, 0x65, 0x39, 0x63, 0x63, 0x30, 0xd, 0xa, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0xd, 0xa, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x39, 0x38, 0x38, 0x35, 0x32, 0x30, 0x34, 0x34, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0xd, 0xa, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0xd, 0xa, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0xd, 0xa, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x33, 0x6d, 0xd, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x39, 0x38, 0xd, 0xa, 0xd, 0xa, 0x76, 0x3d, 0x30, 0xd, 0xa, 0x6f, 0x3d, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x20, 0x31, 0x33, 0x30, 0x30, 0x34, 0x39, 0x37, 0x30, 0x20, 0x31, 0x33, 0x30, 0x31, 0x33, 0x34, 0x34, 0x32, 0x20, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0xd, 0xa, 0x73, 0x3d, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0xd, 0xa, 0x63, 0x3d, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0xd, 0xa, 0x74, 0x3d, 0x30, 0x20, 0x30, 0xd, 0xa, 0x6d, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x38, 0x30, 0x30, 0x30, 0x20, 0x52, 0x54, 0x50, 0x2f, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20, 0x30, 0x20, 0x33, 0x20, 0x39, 0x38, 0x20, 0x39, 0x37, 0x20, 0x31, 0x30, 0x31, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x30, 0x20, 0x70, 0x63, 0x6d, 0x75, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x38, 0x20, 0x70, 0x63, 0x6d, 0x61, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x33, 0x20, 0x67, 0x73, 0x6d, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x39, 0x38, 0x20, 0x69, 0x4c, 0x42, 0x43, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x39, 0x37, 0x20, 0x73, 0x70, 0x65, 0x65, 0x78, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x31, 0x30, 0x31, 0x20, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x38, 0x30, 0x30, 0x30, 0xd, 0xa, 0x61, 0x3d, 0x66, 0x6d, 0x74, 0x70, 0x3a, 0x31, 0x30, 0x31, 0x20, 0x30, 0x2d, 0x31, 0x35, 0xd, 0xa}
var rawRTCPPacket = []byte{0x0, 0x11, 0x43, 0x37, 0x75, 0x9b, 0x0, 0x0, 0x0, 0x60, 0xdd, 0x19, 0x8, 0x0, 0x45, 0x0, 0x0, 0x70, 0x11, 0xb8, 0x0, 0x0, 0x80, 0x11, 0x88, 0xc2, 0xc8, 0x39, 0x7, 0xcc, 0xc8, 0x39, 0x7, 0xc4, 0x1f, 0x41, 0x9d, 0xb9, 0x0, 0x5c, 0xb1, 0x73, 0x81, 0xc8, 0x0, 0xc, 0xd2, 0xbd, 0x4e, 0x3e, 0xc5, 0x92, 0x86, 0xd4, 0xe6, 0xe9, 0x78, 0xd5, 0x0, 0x0, 0x1, 0x40, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x1, 0x40, 0xd2, 0xbd, 0x4e, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x86, 0xd4, 0xe6, 0xe9, 0x0, 0x0, 0x0, 0x1, 0x81, 0xc9, 0x0, 0x7, 0xd2, 0xbd, 0x4e, 0x3e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86, 0xd4, 0xe6, 0xe9, 0x0, 0x0, 0x0, 0x1}

func BenchmarkProcess(b *testing.B) {
	config.Cfg.Dedup = false
	//config.Cfg.DiscardMethod = "REGISTER"
	//config.Cfg.Mode = "SIPLOG"
	d := NewDecoder(layers.LinkTypeEthernet)
	ci := gopacket.CaptureInfo{Timestamp: time.Now(), CaptureLength: 715, Length: 715, InterfaceIndex: 4}
	go func() {
		for {
			select {
			case _ = <-PacketQueue:
			}
		}
	}()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		d.Process(rawSIPPacket, &ci)
		d.Process(rawRTCPPacket, &ci)
	}
}
